"""
Django settings for dailyfresh project.

Generated by 'django-admin startproject' using Django 2.1.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import os
import sys

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

sys.path.insert(0, os.path.join(BASE_DIR, 'apps'))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'pq#ag@)@-am1n!h^2&cx4(+!&!9rz^(7x6%w1^)h0**l)$f(nm'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'haystack',  # 注册全文检索框架
    'user',
    'goods',
    'order',
    'cart',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'dailyfresh.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'dailyfresh.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'daily_fresh_test',
        'HOST': 'localhost',
        'USER': 'root',
        'PASSWORD': '123456',
        'PORT': '3306',
    }
}

AUTH_USER_MODEL = 'user.User'

# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

# 指定访问静态文件的路由, 即可以使用"localhost:8000/static/静态文件名"的方式访问静态目录下的静态文件
STATIC_URL = '/static/'
# 指定静态目录
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]
# 指定收集静态文件的路径
STATIC_ROOT = '/var/www/dailyfresh/static'

# 发送邮件配置
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.qq.com'
EMAIL_PORT = 25
# 发送邮件的邮箱
EMAIL_HOST_USER = '8495966984@qq.com'
# 在邮箱中设置的客户端授权密码
EMAIL_HOST_PASSWORD = 'niuyibcdxzwrbfie'
# 收件人看到的发件人
EMAIL_FROM = 'Sylas<849596984@qq.com>'

# django的缓存配置
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://192.168.1.111:6379/9",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient"
        }
    }
}
SESSION_ENGINE = "django.contrib.sessions.backends.cache"
SESSION_CACHE_ALIAS = "default"
# 安装了django-redis, 并配置好以上, 当程序中使用session存储数据的时候就会使用redis进行存储!
# 可使用本地客户端连接: "redis-cli -h 192.168.1.111 -p6379" 目标redis服务器, 然后查看"select 9; keys *", 结果中应该有与浏览器中对应的session id值

# 配置登录url地址
LOGIN_URL = '/user/login'

# 设置Django的文件存储类
DEFAULT_FILE_STORAGE = 'utils.fdfs.storage.FDFSStorage'
# 设置FastDFS使用的client.conf文件路径
FDFS_CLIENT_CONF = './utils/fdfs/client.conf'
# FastDFS的storage server的地址(Nginx的ip和端口)
FDFS_URL = 'http://192.168.1.111:8888/'


# 全文检索框架的配置
HAYSTACK_CONNECTIONS = {
    'default': {
        # 使用whoosh搜索引擎
        # 'ENGINE': 'haystack.backends.whoosh_backend.WhooshEngine',  # 对应安装包目录下的路径
        'ENGINE': 'haystack.backends.whoosh_cn_backend.WhooshEngine',  # 对应安装包目录下的路径
        # 索引文件路径
        'PATH': os.path.join(BASE_DIR, 'whoosh_index')
    }
}

# 当添加 修改 删除数据的时候, 自动生成索引
HAYSTACK_SIGNAL_PROCESSOR = 'haystack.signals.RealtimeSignalProcessor'
# 指定搜索结果每页显示的条数
HAYSTACK_SEARCH_RESULTS_PER_PAGE = 20

# 支付宝应用公钥, 上传到支付宝平台, 获取支付宝公钥, 项目中使用不到
ALIPAY_APP_PUBLIC_KEY = 'MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAgmtmiKr8qkHzxR0SdAOuQtDrCmH+5WnvEhMyvZ6AmtsCHQ3z1hiD/ao46rAdU6U77CrgB4yZKf/gMCHiio9XdKA+FTebSNnohtEw8qZjHkHHcqgXFIsonixKkiEsLtsrKKY0nD+JbtaGsPixn1n7mSgoXjY/4Bfg168IWiyzZslJUAK4u1eFChLdrg0eQwcvH5Ep2H1RbBlL2+zGvt0TF89wWSwqgvcn/NWbv2Gg5uhHdzwAHHlbQC6RWbsVMSbvqiiODM/sbe3j4vaQMDtnVsnPnoKAB4HBMXDQ58nB85hiwVyOKhI10oeoFk8r3WuMIGOCjkYQdsuBHDXAo1K3rQIDAQAB'
# 支付宝应用私钥
ALIPAY_APP_PRIVATE_KEY = '-----BEGIN RSA PRIVATE KEY-----MIIEowIBAAKCAQEAgmtmiKr8qkHzxR0SdAOuQtDrCmH+5WnvEhMyvZ6AmtsCHQ3z1hiD/ao46rAdU6U77CrgB4yZKf/gMCHiio9XdKA+FTebSNnohtEw8qZjHkHHcqgXFIsonixKkiEsLtsrKKY0nD+JbtaGsPixn1n7mSgoXjY/4Bfg168IWiyzZslJUAK4u1eFChLdrg0eQwcvH5Ep2H1RbBlL2+zGvt0TF89wWSwqgvcn/NWbv2Gg5uhHdzwAHHlbQC6RWbsVMSbvqiiODM/sbe3j4vaQMDtnVsnPnoKAB4HBMXDQ58nB85hiwVyOKhI10oeoFk8r3WuMIGOCjkYQdsuBHDXAo1K3rQIDAQABAoIBACdxriAVfrdLnRt3kHYwCstAfmW0f7AI2vpffhAlWQX8yOXaq22MGpdknTQ1sZjzt2zVBs6hsk0mizpjdS2s7qliMYSfPcLJzO7BZAlvUzj6cgT2W4ymDdHQ2XjauY8uUB5KLk03ViyEi1YI0Ue9oj+PCq57v9PZxPHWiTMko9mpA7/JR93ii/rDRWrx8Z2h0TKL6ZqncnF96Bh0r+sZePO7HmeI7blJw1+Hv99E2Zmvsan+6+F+OSvG9CzioRTTWEBqFF1V4mRzl5FMf0D9s3rBssnEk1Ju/491PxGsxCPpGNarIS/fTavjv9PAWDQi7IEoMn7ivt6P6W25nid9sG0CgYEA5OnZKpoaAQTEMbrJZGVPGXtB8HtX4vBavIB10lCC8ZWE0zfaX2UgMT2zhrBmPLFgouIxpNMYvF/Dtpyv0s95b/lJG2NaRv+iYko9Z+e8WpFy3iLaReLD/3GyvDDbGF+Iyb3NZcqyFlyNaKVVFCFEAbYiR/RJLIpM+drAeK4RyK8CgYEAkdoDy2LpJx1nkhPYjuAkQT18rA9XjkT6TMke8W/5ca+zp5IHk7tQManslKbFCAlXgIABnURdZWOp/9jXQvT2L8+iLd4+DE/nneVjsA771ZOcvrtM7PW2H7DuSbvux/J1O9gFai1v/TgX7neMeoh27/7DHNR6vjgeLZmvF8S+pGMCgYEAmT5XbGanW+E1+lih87zCfDuAhB3+UuU2yRRyS64sStAekEvGu6/2IiC9K0Cx4JWaLNCiDUZoO8scOQahyc2s7SIEJ/qV+AuwSH6Mpx+Cf1r5e+33E2vgbARQdB18vs9Nwkh21VshZ0jkPZbY4tX2MfMc9fB6f//B0k34JZHaQ+8CgYBFEfXSD5lSiL5Pk05u+v6wVqn/4ZQZL9lJG8WnmNuMVyTBKoqkD4S+wDXlf8S3NZVWqUgabhG8viH3o3ztnIwpwC6RgjnoIr8RK1y2N6JTVoBYYuLfJM2G3Ic8K9+8mLmkCX0m9zWduT68E6lXLeEFbqR/trAZ/QFtnuYoX2fY+QKBgAvomSIfRjRKbeQiOLS7cZRk2GKjFvnFbm31e7SspsFClACAYDnqa0N8KYEFddcRYM6PN3ho2W3IqimBDhv3U8QIuFgXd+lnI/4VLvayCcxF1rTfhl6R92LuWmwlNBZeVT+3f+8BnovxGYwgKeTAJBIqUQMHeWDPbmOHczobnS1p-----END RSA PRIVATE KEY-----'
# 支付宝公钥
ALIPAY_PUBLIC_KEY = '-----BEGIN PUBLIC KEY-----MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAj072R7y5qB9gr6Yf+UvWTitl7s6geHjVH1Otsz/2Weq0/3ZhBXhcX6iO/+Pad2bJueafc7wfAtuOPVjBRVxQbUWqO+H6dTD2Bd7UB8SIo4rEeNATvWZE8ckk031qI0cA1PLIgJ+jcMhx7tMybFq9dPUHfFS3jV6ieD3rjWpGj40r+4pOFpmpPOjuK+Y8nVKBCfUpYqwXD4RQSEQ58si64N1571mTcDFuWAfqmxiVNe/GuNnZvG+4ParoR8eXTE2PbOUYF8IXaLBzURHDQaThNURBk3zdfXsTE/VYVF8iS/lT+TVIRkH7BjhlrNGYYjGq0pnMtVjAUF/1Uzi7zf/fBwIDAQAB-----END PUBLIC KEY-----'

